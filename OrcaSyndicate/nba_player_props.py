import streamlit as st
import pandas as pd
import re as re

# st.logo("C:/Users/ajaku/Downloads/logo1_clear.png")
st.set_page_config(layout="wide")

st.header('Model Description',divider="gray")
nba_prop_intro = '''
Our NBA player props were introduced in late 2023 and quickly became one of our most popular models.
 We utilize a 3rd party's regressed [Kalman-optimized](https://en.wikipedia.org/wiki/Kalman_filter) outputs for each player's base box score projections, and then adjust them based on a consensus minutes played estimate for each player and on the game pace values generated by our team spreads model.
   In early 2024, we released a Version 2.0 that further enhanced both the raw projection accuracy and the probability conversion:

'''
st.write(nba_prop_intro)
st.markdown("- In Version 1, player-level consistency was calculated using a coefficient of variance estimate applied to the daily projection. This had the effect of underestimating upside/downside values and thus making the model overly confident in its probabilities and did not allow for varying levels of consistency in different box score items. In Version 2, all metrics are calculated independently for each market (see table below left)")
st.markdown("- Before, all projections assumed a simple Gaussian distribution. While this was fine for high-volume markets like points, it was less than ideal for lower-total ones like blocks (see skew values in center table). Now, the distributions are customized for each market, and include both discrete and continuous methods.")
st.markdown("- In Version 1, the pace adjustment was applied equally to each box score item. However, certain stats are more heavily affected by pace changes than others. For example, in the correlation matrices below right, you can see that PRA is much more heavily impacted by pace changes than steals+blocks are. Now, pace adjustments are optimized for each individual stat.")

st.markdown('''
<style>
[data-testid="stMarkdownContainer"] ul{
    padding-left:40px;
}
</style>
''', unsafe_allow_html=True)
st.write('')

st.image('site_images/nba_intro_3.png')
st.write('')
st.header('NBA Player Prop Market Models',divider="gray")
st.markdown("## _Points_")
st.subheader('Model Test Performance Summary',)
st.image('site_images/nba_prop_pts_summary.png')
st.write('')

@st.cache_data  # ðŸ‘ˆ Add the caching decorator
def load_data(url,sheet_name):
    df = pd.read_excel(url,sheet_name)
    return df

st.subheader("All Test Datapoints")
st.write("")
data_pts = load_data('site_documents/nba_data_website.xlsx', sheet_name=0)
data_pts['Date'] = pd.to_datetime(data_pts['Date']).dt.strftime('%m-%d-%Y')
columns_to_format_as_decimal = ['Over Odds','Under Odds','KC Unit Bet Size','KC Unit Profit','KC Unit Result']
for column in columns_to_format_as_decimal:
    data_pts[column] = data_pts[column].map('{:.2f}'.format)
players_pts = sorted(data_pts['Player'].unique())
teams = sorted(data_pts['Team'].unique())
selected_player_pts = st.selectbox('Player:', ['All'] + list(players_pts), key='Player Pts')
selected_team_pts = st.selectbox('Team:', ['All'] + list(teams), key='Teams Pts')
# Filter the data based on the selected values
if selected_player_pts != 'All':
    data_pts = data_pts[data_pts['Player'] == selected_player_pts]
if selected_team_pts != 'All':
    data_pts = data_pts[data_pts['Team'] == selected_team_pts]
#data_pts.drop(['HK Profit','HK Result'], axis=1, inplace=True)
st.dataframe(data_pts,hide_index=True)
"---"
st.markdown("## _Rebounds_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_reb_summary.png')
st.write('')
st.subheader("All Test Datapoints")
st.write("")

data_reb = load_data('site_documents/nba_data_website.xlsx', sheet_name=1)
data_reb =data_reb.dropna(subset='Player')
data_reb['Date'] = pd.to_datetime(data_reb['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_reb[column] = data_reb[column].map('{:.2f}'.format)
players_reb = sorted(data_reb['Player'].unique())
selected_player_reb = st.selectbox('Player:', ['All'] + list(players_reb), key='Player Reb')
selected_team_reb = st.selectbox('Team:', ['All'] + list(teams), key='Teams Reb')
# Filter the data based on the selected values
if selected_player_reb != 'All':
    data_reb = data_reb[data_reb['Player'] == selected_player_reb]
if selected_team_reb != 'All':
    data_reb = data_reb[data_reb['Team'] == selected_team_reb]
st.dataframe(data_reb,hide_index=True)
st.write('')
"---"
st.markdown("## _Assists_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_ast_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_ast = load_data('site_documents/nba_data_website.xlsx', sheet_name=2)
data_ast =data_ast.dropna(subset='Player')
data_ast['Date'] = pd.to_datetime(data_ast['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. ast.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_ast[column] = data_ast[column].map('{:.2f}'.format)
players_ast = sorted(data_ast['Player'].unique())
selected_player_ast = st.selectbox('Player:', ['All'] + list(players_ast), key='Player Ast')
selected_team_ast = st.selectbox('Team:', ['All'] + list(teams), key='Teams ast')
# Filter the data based on the selected values
if selected_player_ast != 'All':
    data_ast = data_ast[data_ast['Player'] == selected_player_ast]
if selected_team_ast != 'All':
    data_ast = data_ast[data_ast['Team'] == selected_team_ast]
st.dataframe(data_ast,hide_index=True)
st.write('')
"---"
st.markdown("## _3PM_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_3PM_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_3PM = load_data('site_documents/nba_data_website.xlsx', sheet_name=3)
data_3PM =data_3PM.dropna(subset='Player')
data_3PM['Date'] = pd.to_datetime(data_3PM['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_3PM[column] = data_3PM[column].map('{:.2f}'.format)
players_3PM = sorted(data_3PM['Player'].unique())
selected_player_3PM = st.selectbox('Player:', ['All'] + list(players_3PM), key='Player 3PM')
selected_team_3PM = st.selectbox('Team:', ['All'] + list(teams), key='Teams 3PM')
# Filter the data based on the selected values
if selected_player_3PM != 'All':
    data_3PM = data_3PM[data_3PM['Player'] == selected_player_3PM]
if selected_team_3PM != 'All':
    data_3PM = data_3PM[data_3PM['Team'] == selected_team_3PM]
st.dataframe(data_3PM,hide_index=True)
st.write('')
"---"
st.markdown("## _Steals_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_stl_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_stl = load_data('site_documents/nba_data_website.xlsx', sheet_name=4)
data_stl =data_stl.dropna(subset='Player')
data_stl['Date'] = pd.to_datetime(data_stl['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_stl[column] = data_stl[column].map('{:.2f}'.format)
players_stl = sorted(data_stl['Player'].unique())
selected_player_stl = st.selectbox('Player:', ['All'] + list(players_stl), key='Player Stl')
selected_team_stl = st.selectbox('Team:', ['All'] + list(teams), key='Teams Stl')
# Filter the data based on the selected values
if selected_player_stl != 'All':
    data_stl = data_stl[data_stl['Player'] == selected_player_stl]
if selected_team_stl != 'All':
    data_stl = data_stl[data_stl['Team'] == selected_team_stl]
st.dataframe(data_stl,hide_index=True)
st.write('')
"---"
st.markdown("## _P+R_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_pr_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_pr = load_data('site_documents/nba_data_website.xlsx', sheet_name=7)
data_pr =data_pr.dropna(subset='Player')
data_pr['Date'] = pd.to_datetime(data_pr['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_pr[column] = data_pr[column].map('{:.2f}'.format)
players_pr = sorted(data_pr['Player'].unique())
selected_player_pr = st.selectbox('Player:', ['All'] + list(players_pr), key='Player PR')
selected_team_pr = st.selectbox('Team:', ['All'] + list(teams), key='Teams PR')
# Filter the data based on the selected values
if selected_player_pr != 'All':
    data_pr = data_pr[data_pr['Player'] == selected_player_pr]
if selected_team_pr != 'All':
    data_pr = data_pr[data_pr['Team'] == selected_team_pr]
st.dataframe(data_pr,hide_index=True)
st.write('')
"---"
st.markdown("## _P+A_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_pa_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_pa = load_data('site_documents/nba_data_website.xlsx', sheet_name=8)
data_pa =data_pa.dropna(subset='Player')
data_pa['Date'] = pd.to_datetime(data_pa['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_pa[column] = data_pa[column].map('{:.2f}'.format)
players_pa = sorted(data_pa['Player'].unique())
selected_player_pa = st.selectbox('Player:', ['All'] + list(players_pa), key='Player PA')
selected_team_pa = st.selectbox('Team:', ['All'] + list(teams), key='Teams PA')
# Filter the data based on the selected values
if selected_player_pa != 'All':
    data_pa = data_pa[data_pa['Player'] == selected_player_pa]
if selected_team_pa != 'All':
    data_pa = data_pa[data_pa['Team'] == selected_team_pa]
st.dataframe(data_pa,hide_index=True)
st.write('')
"---"
st.markdown("## _R+A_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_ra_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_ra = load_data('site_documents/nba_data_website.xlsx', sheet_name=9)
data_ra =data_ra.dropna(subset='Player')
data_ra['Date'] = pd.to_datetime(data_ra['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_ra[column] = data_ra[column].map('{:.2f}'.format)
players_ra = sorted(data_ra['Player'].unique())
selected_player_ra = st.selectbox('Player:', ['All'] + list(players_ra), key='Player RA')
selected_team_ra = st.selectbox('Team:', ['All'] + list(teams), key='Teams RA')
# Filter the data based on the selected values
if selected_player_ra != 'All':
    data_ra = data_ra[data_ra['Player'] == selected_player_ra]
if selected_team_ra != 'All':
    data_ra = data_ra[data_ra['Team'] == selected_team_ra]
st.dataframe(data_ra,hide_index=True)
st.write('')
"---"
st.markdown("## _S+B_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_sb_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_sb = load_data('site_documents/nba_data_website.xlsx', sheet_name=5)
data_sb =data_sb.dropna(subset='Player')
data_sb['Date'] = pd.to_datetime(data_sb['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_sb[column] = data_sb[column].map('{:.2f}'.format)
players_sb = sorted(data_sb['Player'].unique())
selected_player_sb = st.selectbox('Player:', ['All'] + list(players_sb), key='Player SB')
selected_team_sb = st.selectbox('Team:', ['All'] + list(teams), key='Teams SB')
# Filter the data based on the selected values
if selected_player_sb != 'All':
    data_sb = data_sb[data_sb['Player'] == selected_player_sb]
if selected_team_sb != 'All':
    data_sb = data_sb[data_sb['Team'] == selected_team_sb]
st.dataframe(data_sb,hide_index=True)
st.write('')
"---"
st.markdown("## _TO_")
st.subheader('Model Test Performance Summary')
st.image('site_images/nba_prop_to_summary.png')
st.write('')
st.subheader('All Test Datapoints')
data_to = load_data('site_documents/nba_data_website.xlsx', sheet_name=6)
data_to =data_to.dropna(subset='Player')
data_to['Date'] = pd.to_datetime(data_to['Date']).dt.strftime('%m-%d-%Y')
# columns_to_format_as_decimal1 = ['Over Odds','Under Odds','Proj. Reb.','BB Odds']
# for column in columns_to_format_as_decimal1:
#     data_to[column] = data_to[column].map('{:.2f}'.format)
players_to = sorted(data_to['Player'].unique())
selected_player_to = st.selectbox('Player:', ['All'] + list(players_to), key='Player TO')
selected_team_to = st.selectbox('Team:', ['All'] + list(teams), key='Teams TO')
# Filter the data based on the selected values
if selected_player_to != 'All':
    data_to = data_to[data_to['Player'] == selected_player_to]
if selected_team_to != 'All':
    data_to = data_to[data_to['Team'] == selected_team_to]
st.dataframe(data_to,hide_index=True)
st.write('')





# url = 'https://docs.google.com/spreadsheets/d/1-iLpgYDZOjEXi9PvAZfRkivGOHEi-eHB323npm0SkdI/edit?gid=955036045#gid=955036045'

# new_url = convert_google_sheet_url(url)

# df = pd.read_csv(new_url)
# df['Date'] = pd.to_datetime(df['Date'])
# df['Date'] = df['Date'].dt.strftime('%m-%d-%Y')
# st.dataframe(df,hide_index=True)


